<?php
/**
 * ApplicationDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bloom API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApplicationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'income_period' => '\Swagger\Client\Model\IncomePeriod',
'status' => '\Swagger\Client\Model\ApplicationStatus',
'language' => '\Swagger\Client\Model\Language',
'submission_type' => '\Swagger\Client\Model\ApplicationSubmissionType',
'listing' => '\Swagger\Client\Model\IdDto',
'applicant' => '\Swagger\Client\Model\ApplicantDto',
'mailing_address' => '\Swagger\Client\Model\AddressDto',
'alternate_address' => '\Swagger\Client\Model\AddressDto',
'alternate_contact' => '\Swagger\Client\Model\AlternateContactDto',
'accessibility' => '\Swagger\Client\Model\AccessibilityDto',
'demographics' => '\Swagger\Client\Model\DemographicsDto',
'household_members' => '\Swagger\Client\Model\HouseholdMemberDto[]',
'id' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'deleted_at' => '\DateTime',
'app_url' => 'string',
'additional_phone' => 'bool',
'additional_phone_number' => 'string',
'additional_phone_number_type' => 'string',
'contact_preferences' => 'string[]',
'household_size' => 'float',
'housing_status' => 'string',
'send_mail_to_mailing_address' => 'bool',
'income_vouchers' => 'bool',
'income' => 'string',
'preferred_unit' => 'string[]',
'preferences' => '\Swagger\Client\Model\ApplicationPreference[]',
'accepted_terms' => 'bool',
'submission_date' => '\DateTime',
'marked_as_duplicate' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'income_period' => null,
'status' => null,
'language' => null,
'submission_type' => null,
'listing' => null,
'applicant' => null,
'mailing_address' => null,
'alternate_address' => null,
'alternate_contact' => null,
'accessibility' => null,
'demographics' => null,
'household_members' => null,
'id' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'deleted_at' => 'date-time',
'app_url' => null,
'additional_phone' => null,
'additional_phone_number' => null,
'additional_phone_number_type' => null,
'contact_preferences' => null,
'household_size' => null,
'housing_status' => null,
'send_mail_to_mailing_address' => null,
'income_vouchers' => null,
'income' => null,
'preferred_unit' => null,
'preferences' => null,
'accepted_terms' => null,
'submission_date' => 'date-time',
'marked_as_duplicate' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'income_period' => 'incomePeriod',
'status' => 'status',
'language' => 'language',
'submission_type' => 'submissionType',
'listing' => 'listing',
'applicant' => 'applicant',
'mailing_address' => 'mailingAddress',
'alternate_address' => 'alternateAddress',
'alternate_contact' => 'alternateContact',
'accessibility' => 'accessibility',
'demographics' => 'demographics',
'household_members' => 'householdMembers',
'id' => 'id',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'deleted_at' => 'deletedAt',
'app_url' => 'appUrl',
'additional_phone' => 'additionalPhone',
'additional_phone_number' => 'additionalPhoneNumber',
'additional_phone_number_type' => 'additionalPhoneNumberType',
'contact_preferences' => 'contactPreferences',
'household_size' => 'householdSize',
'housing_status' => 'housingStatus',
'send_mail_to_mailing_address' => 'sendMailToMailingAddress',
'income_vouchers' => 'incomeVouchers',
'income' => 'income',
'preferred_unit' => 'preferredUnit',
'preferences' => 'preferences',
'accepted_terms' => 'acceptedTerms',
'submission_date' => 'submissionDate',
'marked_as_duplicate' => 'markedAsDuplicate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'income_period' => 'setIncomePeriod',
'status' => 'setStatus',
'language' => 'setLanguage',
'submission_type' => 'setSubmissionType',
'listing' => 'setListing',
'applicant' => 'setApplicant',
'mailing_address' => 'setMailingAddress',
'alternate_address' => 'setAlternateAddress',
'alternate_contact' => 'setAlternateContact',
'accessibility' => 'setAccessibility',
'demographics' => 'setDemographics',
'household_members' => 'setHouseholdMembers',
'id' => 'setId',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'deleted_at' => 'setDeletedAt',
'app_url' => 'setAppUrl',
'additional_phone' => 'setAdditionalPhone',
'additional_phone_number' => 'setAdditionalPhoneNumber',
'additional_phone_number_type' => 'setAdditionalPhoneNumberType',
'contact_preferences' => 'setContactPreferences',
'household_size' => 'setHouseholdSize',
'housing_status' => 'setHousingStatus',
'send_mail_to_mailing_address' => 'setSendMailToMailingAddress',
'income_vouchers' => 'setIncomeVouchers',
'income' => 'setIncome',
'preferred_unit' => 'setPreferredUnit',
'preferences' => 'setPreferences',
'accepted_terms' => 'setAcceptedTerms',
'submission_date' => 'setSubmissionDate',
'marked_as_duplicate' => 'setMarkedAsDuplicate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'income_period' => 'getIncomePeriod',
'status' => 'getStatus',
'language' => 'getLanguage',
'submission_type' => 'getSubmissionType',
'listing' => 'getListing',
'applicant' => 'getApplicant',
'mailing_address' => 'getMailingAddress',
'alternate_address' => 'getAlternateAddress',
'alternate_contact' => 'getAlternateContact',
'accessibility' => 'getAccessibility',
'demographics' => 'getDemographics',
'household_members' => 'getHouseholdMembers',
'id' => 'getId',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'deleted_at' => 'getDeletedAt',
'app_url' => 'getAppUrl',
'additional_phone' => 'getAdditionalPhone',
'additional_phone_number' => 'getAdditionalPhoneNumber',
'additional_phone_number_type' => 'getAdditionalPhoneNumberType',
'contact_preferences' => 'getContactPreferences',
'household_size' => 'getHouseholdSize',
'housing_status' => 'getHousingStatus',
'send_mail_to_mailing_address' => 'getSendMailToMailingAddress',
'income_vouchers' => 'getIncomeVouchers',
'income' => 'getIncome',
'preferred_unit' => 'getPreferredUnit',
'preferences' => 'getPreferences',
'accepted_terms' => 'getAcceptedTerms',
'submission_date' => 'getSubmissionDate',
'marked_as_duplicate' => 'getMarkedAsDuplicate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['income_period'] = isset($data['income_period']) ? $data['income_period'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['submission_type'] = isset($data['submission_type']) ? $data['submission_type'] : null;
        $this->container['listing'] = isset($data['listing']) ? $data['listing'] : null;
        $this->container['applicant'] = isset($data['applicant']) ? $data['applicant'] : null;
        $this->container['mailing_address'] = isset($data['mailing_address']) ? $data['mailing_address'] : null;
        $this->container['alternate_address'] = isset($data['alternate_address']) ? $data['alternate_address'] : null;
        $this->container['alternate_contact'] = isset($data['alternate_contact']) ? $data['alternate_contact'] : null;
        $this->container['accessibility'] = isset($data['accessibility']) ? $data['accessibility'] : null;
        $this->container['demographics'] = isset($data['demographics']) ? $data['demographics'] : null;
        $this->container['household_members'] = isset($data['household_members']) ? $data['household_members'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['deleted_at'] = isset($data['deleted_at']) ? $data['deleted_at'] : null;
        $this->container['app_url'] = isset($data['app_url']) ? $data['app_url'] : null;
        $this->container['additional_phone'] = isset($data['additional_phone']) ? $data['additional_phone'] : null;
        $this->container['additional_phone_number'] = isset($data['additional_phone_number']) ? $data['additional_phone_number'] : null;
        $this->container['additional_phone_number_type'] = isset($data['additional_phone_number_type']) ? $data['additional_phone_number_type'] : null;
        $this->container['contact_preferences'] = isset($data['contact_preferences']) ? $data['contact_preferences'] : null;
        $this->container['household_size'] = isset($data['household_size']) ? $data['household_size'] : null;
        $this->container['housing_status'] = isset($data['housing_status']) ? $data['housing_status'] : null;
        $this->container['send_mail_to_mailing_address'] = isset($data['send_mail_to_mailing_address']) ? $data['send_mail_to_mailing_address'] : null;
        $this->container['income_vouchers'] = isset($data['income_vouchers']) ? $data['income_vouchers'] : null;
        $this->container['income'] = isset($data['income']) ? $data['income'] : null;
        $this->container['preferred_unit'] = isset($data['preferred_unit']) ? $data['preferred_unit'] : null;
        $this->container['preferences'] = isset($data['preferences']) ? $data['preferences'] : null;
        $this->container['accepted_terms'] = isset($data['accepted_terms']) ? $data['accepted_terms'] : null;
        $this->container['submission_date'] = isset($data['submission_date']) ? $data['submission_date'] : null;
        $this->container['marked_as_duplicate'] = isset($data['marked_as_duplicate']) ? $data['marked_as_duplicate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['submission_type'] === null) {
            $invalidProperties[] = "'submission_type' can't be null";
        }
        if ($this->container['listing'] === null) {
            $invalidProperties[] = "'listing' can't be null";
        }
        if ($this->container['applicant'] === null) {
            $invalidProperties[] = "'applicant' can't be null";
        }
        if ($this->container['mailing_address'] === null) {
            $invalidProperties[] = "'mailing_address' can't be null";
        }
        if ($this->container['alternate_address'] === null) {
            $invalidProperties[] = "'alternate_address' can't be null";
        }
        if ($this->container['alternate_contact'] === null) {
            $invalidProperties[] = "'alternate_contact' can't be null";
        }
        if ($this->container['accessibility'] === null) {
            $invalidProperties[] = "'accessibility' can't be null";
        }
        if ($this->container['demographics'] === null) {
            $invalidProperties[] = "'demographics' can't be null";
        }
        if ($this->container['household_members'] === null) {
            $invalidProperties[] = "'household_members' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['contact_preferences'] === null) {
            $invalidProperties[] = "'contact_preferences' can't be null";
        }
        if ($this->container['preferred_unit'] === null) {
            $invalidProperties[] = "'preferred_unit' can't be null";
        }
        if ($this->container['preferences'] === null) {
            $invalidProperties[] = "'preferences' can't be null";
        }
        if ($this->container['marked_as_duplicate'] === null) {
            $invalidProperties[] = "'marked_as_duplicate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets income_period
     *
     * @return \Swagger\Client\Model\IncomePeriod
     */
    public function getIncomePeriod()
    {
        return $this->container['income_period'];
    }

    /**
     * Sets income_period
     *
     * @param \Swagger\Client\Model\IncomePeriod $income_period income_period
     *
     * @return $this
     */
    public function setIncomePeriod($income_period)
    {
        $this->container['income_period'] = $income_period;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\ApplicationStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\ApplicationStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Swagger\Client\Model\Language
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Swagger\Client\Model\Language $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets submission_type
     *
     * @return \Swagger\Client\Model\ApplicationSubmissionType
     */
    public function getSubmissionType()
    {
        return $this->container['submission_type'];
    }

    /**
     * Sets submission_type
     *
     * @param \Swagger\Client\Model\ApplicationSubmissionType $submission_type submission_type
     *
     * @return $this
     */
    public function setSubmissionType($submission_type)
    {
        $this->container['submission_type'] = $submission_type;

        return $this;
    }

    /**
     * Gets listing
     *
     * @return \Swagger\Client\Model\IdDto
     */
    public function getListing()
    {
        return $this->container['listing'];
    }

    /**
     * Sets listing
     *
     * @param \Swagger\Client\Model\IdDto $listing listing
     *
     * @return $this
     */
    public function setListing($listing)
    {
        $this->container['listing'] = $listing;

        return $this;
    }

    /**
     * Gets applicant
     *
     * @return \Swagger\Client\Model\ApplicantDto
     */
    public function getApplicant()
    {
        return $this->container['applicant'];
    }

    /**
     * Sets applicant
     *
     * @param \Swagger\Client\Model\ApplicantDto $applicant applicant
     *
     * @return $this
     */
    public function setApplicant($applicant)
    {
        $this->container['applicant'] = $applicant;

        return $this;
    }

    /**
     * Gets mailing_address
     *
     * @return \Swagger\Client\Model\AddressDto
     */
    public function getMailingAddress()
    {
        return $this->container['mailing_address'];
    }

    /**
     * Sets mailing_address
     *
     * @param \Swagger\Client\Model\AddressDto $mailing_address mailing_address
     *
     * @return $this
     */
    public function setMailingAddress($mailing_address)
    {
        $this->container['mailing_address'] = $mailing_address;

        return $this;
    }

    /**
     * Gets alternate_address
     *
     * @return \Swagger\Client\Model\AddressDto
     */
    public function getAlternateAddress()
    {
        return $this->container['alternate_address'];
    }

    /**
     * Sets alternate_address
     *
     * @param \Swagger\Client\Model\AddressDto $alternate_address alternate_address
     *
     * @return $this
     */
    public function setAlternateAddress($alternate_address)
    {
        $this->container['alternate_address'] = $alternate_address;

        return $this;
    }

    /**
     * Gets alternate_contact
     *
     * @return \Swagger\Client\Model\AlternateContactDto
     */
    public function getAlternateContact()
    {
        return $this->container['alternate_contact'];
    }

    /**
     * Sets alternate_contact
     *
     * @param \Swagger\Client\Model\AlternateContactDto $alternate_contact alternate_contact
     *
     * @return $this
     */
    public function setAlternateContact($alternate_contact)
    {
        $this->container['alternate_contact'] = $alternate_contact;

        return $this;
    }

    /**
     * Gets accessibility
     *
     * @return \Swagger\Client\Model\AccessibilityDto
     */
    public function getAccessibility()
    {
        return $this->container['accessibility'];
    }

    /**
     * Sets accessibility
     *
     * @param \Swagger\Client\Model\AccessibilityDto $accessibility accessibility
     *
     * @return $this
     */
    public function setAccessibility($accessibility)
    {
        $this->container['accessibility'] = $accessibility;

        return $this;
    }

    /**
     * Gets demographics
     *
     * @return \Swagger\Client\Model\DemographicsDto
     */
    public function getDemographics()
    {
        return $this->container['demographics'];
    }

    /**
     * Sets demographics
     *
     * @param \Swagger\Client\Model\DemographicsDto $demographics demographics
     *
     * @return $this
     */
    public function setDemographics($demographics)
    {
        $this->container['demographics'] = $demographics;

        return $this;
    }

    /**
     * Gets household_members
     *
     * @return \Swagger\Client\Model\HouseholdMemberDto[]
     */
    public function getHouseholdMembers()
    {
        return $this->container['household_members'];
    }

    /**
     * Sets household_members
     *
     * @param \Swagger\Client\Model\HouseholdMemberDto[] $household_members household_members
     *
     * @return $this
     */
    public function setHouseholdMembers($household_members)
    {
        $this->container['household_members'] = $household_members;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at deleted_at
     *
     * @return $this
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets app_url
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['app_url'];
    }

    /**
     * Sets app_url
     *
     * @param string $app_url app_url
     *
     * @return $this
     */
    public function setAppUrl($app_url)
    {
        $this->container['app_url'] = $app_url;

        return $this;
    }

    /**
     * Gets additional_phone
     *
     * @return bool
     */
    public function getAdditionalPhone()
    {
        return $this->container['additional_phone'];
    }

    /**
     * Sets additional_phone
     *
     * @param bool $additional_phone additional_phone
     *
     * @return $this
     */
    public function setAdditionalPhone($additional_phone)
    {
        $this->container['additional_phone'] = $additional_phone;

        return $this;
    }

    /**
     * Gets additional_phone_number
     *
     * @return string
     */
    public function getAdditionalPhoneNumber()
    {
        return $this->container['additional_phone_number'];
    }

    /**
     * Sets additional_phone_number
     *
     * @param string $additional_phone_number additional_phone_number
     *
     * @return $this
     */
    public function setAdditionalPhoneNumber($additional_phone_number)
    {
        $this->container['additional_phone_number'] = $additional_phone_number;

        return $this;
    }

    /**
     * Gets additional_phone_number_type
     *
     * @return string
     */
    public function getAdditionalPhoneNumberType()
    {
        return $this->container['additional_phone_number_type'];
    }

    /**
     * Sets additional_phone_number_type
     *
     * @param string $additional_phone_number_type additional_phone_number_type
     *
     * @return $this
     */
    public function setAdditionalPhoneNumberType($additional_phone_number_type)
    {
        $this->container['additional_phone_number_type'] = $additional_phone_number_type;

        return $this;
    }

    /**
     * Gets contact_preferences
     *
     * @return string[]
     */
    public function getContactPreferences()
    {
        return $this->container['contact_preferences'];
    }

    /**
     * Sets contact_preferences
     *
     * @param string[] $contact_preferences contact_preferences
     *
     * @return $this
     */
    public function setContactPreferences($contact_preferences)
    {
        $this->container['contact_preferences'] = $contact_preferences;

        return $this;
    }

    /**
     * Gets household_size
     *
     * @return float
     */
    public function getHouseholdSize()
    {
        return $this->container['household_size'];
    }

    /**
     * Sets household_size
     *
     * @param float $household_size household_size
     *
     * @return $this
     */
    public function setHouseholdSize($household_size)
    {
        $this->container['household_size'] = $household_size;

        return $this;
    }

    /**
     * Gets housing_status
     *
     * @return string
     */
    public function getHousingStatus()
    {
        return $this->container['housing_status'];
    }

    /**
     * Sets housing_status
     *
     * @param string $housing_status housing_status
     *
     * @return $this
     */
    public function setHousingStatus($housing_status)
    {
        $this->container['housing_status'] = $housing_status;

        return $this;
    }

    /**
     * Gets send_mail_to_mailing_address
     *
     * @return bool
     */
    public function getSendMailToMailingAddress()
    {
        return $this->container['send_mail_to_mailing_address'];
    }

    /**
     * Sets send_mail_to_mailing_address
     *
     * @param bool $send_mail_to_mailing_address send_mail_to_mailing_address
     *
     * @return $this
     */
    public function setSendMailToMailingAddress($send_mail_to_mailing_address)
    {
        $this->container['send_mail_to_mailing_address'] = $send_mail_to_mailing_address;

        return $this;
    }

    /**
     * Gets income_vouchers
     *
     * @return bool
     */
    public function getIncomeVouchers()
    {
        return $this->container['income_vouchers'];
    }

    /**
     * Sets income_vouchers
     *
     * @param bool $income_vouchers income_vouchers
     *
     * @return $this
     */
    public function setIncomeVouchers($income_vouchers)
    {
        $this->container['income_vouchers'] = $income_vouchers;

        return $this;
    }

    /**
     * Gets income
     *
     * @return string
     */
    public function getIncome()
    {
        return $this->container['income'];
    }

    /**
     * Sets income
     *
     * @param string $income income
     *
     * @return $this
     */
    public function setIncome($income)
    {
        $this->container['income'] = $income;

        return $this;
    }

    /**
     * Gets preferred_unit
     *
     * @return string[]
     */
    public function getPreferredUnit()
    {
        return $this->container['preferred_unit'];
    }

    /**
     * Sets preferred_unit
     *
     * @param string[] $preferred_unit preferred_unit
     *
     * @return $this
     */
    public function setPreferredUnit($preferred_unit)
    {
        $this->container['preferred_unit'] = $preferred_unit;

        return $this;
    }

    /**
     * Gets preferences
     *
     * @return \Swagger\Client\Model\ApplicationPreference[]
     */
    public function getPreferences()
    {
        return $this->container['preferences'];
    }

    /**
     * Sets preferences
     *
     * @param \Swagger\Client\Model\ApplicationPreference[] $preferences preferences
     *
     * @return $this
     */
    public function setPreferences($preferences)
    {
        $this->container['preferences'] = $preferences;

        return $this;
    }

    /**
     * Gets accepted_terms
     *
     * @return bool
     */
    public function getAcceptedTerms()
    {
        return $this->container['accepted_terms'];
    }

    /**
     * Sets accepted_terms
     *
     * @param bool $accepted_terms accepted_terms
     *
     * @return $this
     */
    public function setAcceptedTerms($accepted_terms)
    {
        $this->container['accepted_terms'] = $accepted_terms;

        return $this;
    }

    /**
     * Gets submission_date
     *
     * @return \DateTime
     */
    public function getSubmissionDate()
    {
        return $this->container['submission_date'];
    }

    /**
     * Sets submission_date
     *
     * @param \DateTime $submission_date submission_date
     *
     * @return $this
     */
    public function setSubmissionDate($submission_date)
    {
        $this->container['submission_date'] = $submission_date;

        return $this;
    }

    /**
     * Gets marked_as_duplicate
     *
     * @return bool
     */
    public function getMarkedAsDuplicate()
    {
        return $this->container['marked_as_duplicate'];
    }

    /**
     * Sets marked_as_duplicate
     *
     * @param bool $marked_as_duplicate marked_as_duplicate
     *
     * @return $this
     */
    public function setMarkedAsDuplicate($marked_as_duplicate)
    {
        $this->container['marked_as_duplicate'] = $marked_as_duplicate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
