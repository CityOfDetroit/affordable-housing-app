<?php
/**
 * UnitUpdateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bloom API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UnitUpdateDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnitUpdateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnitUpdateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ami_chart' => 'AllOfUnitUpdateDtoAmiChart',
'ami_percentage' => 'string',
'annual_income_min' => 'string',
'monthly_income_min' => 'string',
'floor' => 'float',
'annual_income_max' => 'string',
'max_occupancy' => 'float',
'min_occupancy' => 'float',
'monthly_rent' => 'string',
'num_bathrooms' => 'float',
'num_bedrooms' => 'float',
'number' => 'string',
'priority_type' => 'string',
'reserved_type' => 'string',
'sq_feet' => 'string',
'status' => 'string',
'unit_type' => 'string',
'monthly_rent_as_percent_of_income' => 'string',
'bmr_program_chart' => 'bool',
'id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ami_chart' => null,
'ami_percentage' => null,
'annual_income_min' => null,
'monthly_income_min' => null,
'floor' => null,
'annual_income_max' => null,
'max_occupancy' => null,
'min_occupancy' => null,
'monthly_rent' => null,
'num_bathrooms' => null,
'num_bedrooms' => null,
'number' => null,
'priority_type' => null,
'reserved_type' => null,
'sq_feet' => null,
'status' => null,
'unit_type' => null,
'monthly_rent_as_percent_of_income' => null,
'bmr_program_chart' => null,
'id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ami_chart' => 'amiChart',
'ami_percentage' => 'amiPercentage',
'annual_income_min' => 'annualIncomeMin',
'monthly_income_min' => 'monthlyIncomeMin',
'floor' => 'floor',
'annual_income_max' => 'annualIncomeMax',
'max_occupancy' => 'maxOccupancy',
'min_occupancy' => 'minOccupancy',
'monthly_rent' => 'monthlyRent',
'num_bathrooms' => 'numBathrooms',
'num_bedrooms' => 'numBedrooms',
'number' => 'number',
'priority_type' => 'priorityType',
'reserved_type' => 'reservedType',
'sq_feet' => 'sqFeet',
'status' => 'status',
'unit_type' => 'unitType',
'monthly_rent_as_percent_of_income' => 'monthlyRentAsPercentOfIncome',
'bmr_program_chart' => 'bmrProgramChart',
'id' => 'id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ami_chart' => 'setAmiChart',
'ami_percentage' => 'setAmiPercentage',
'annual_income_min' => 'setAnnualIncomeMin',
'monthly_income_min' => 'setMonthlyIncomeMin',
'floor' => 'setFloor',
'annual_income_max' => 'setAnnualIncomeMax',
'max_occupancy' => 'setMaxOccupancy',
'min_occupancy' => 'setMinOccupancy',
'monthly_rent' => 'setMonthlyRent',
'num_bathrooms' => 'setNumBathrooms',
'num_bedrooms' => 'setNumBedrooms',
'number' => 'setNumber',
'priority_type' => 'setPriorityType',
'reserved_type' => 'setReservedType',
'sq_feet' => 'setSqFeet',
'status' => 'setStatus',
'unit_type' => 'setUnitType',
'monthly_rent_as_percent_of_income' => 'setMonthlyRentAsPercentOfIncome',
'bmr_program_chart' => 'setBmrProgramChart',
'id' => 'setId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ami_chart' => 'getAmiChart',
'ami_percentage' => 'getAmiPercentage',
'annual_income_min' => 'getAnnualIncomeMin',
'monthly_income_min' => 'getMonthlyIncomeMin',
'floor' => 'getFloor',
'annual_income_max' => 'getAnnualIncomeMax',
'max_occupancy' => 'getMaxOccupancy',
'min_occupancy' => 'getMinOccupancy',
'monthly_rent' => 'getMonthlyRent',
'num_bathrooms' => 'getNumBathrooms',
'num_bedrooms' => 'getNumBedrooms',
'number' => 'getNumber',
'priority_type' => 'getPriorityType',
'reserved_type' => 'getReservedType',
'sq_feet' => 'getSqFeet',
'status' => 'getStatus',
'unit_type' => 'getUnitType',
'monthly_rent_as_percent_of_income' => 'getMonthlyRentAsPercentOfIncome',
'bmr_program_chart' => 'getBmrProgramChart',
'id' => 'getId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ami_chart'] = isset($data['ami_chart']) ? $data['ami_chart'] : null;
        $this->container['ami_percentage'] = isset($data['ami_percentage']) ? $data['ami_percentage'] : null;
        $this->container['annual_income_min'] = isset($data['annual_income_min']) ? $data['annual_income_min'] : null;
        $this->container['monthly_income_min'] = isset($data['monthly_income_min']) ? $data['monthly_income_min'] : null;
        $this->container['floor'] = isset($data['floor']) ? $data['floor'] : null;
        $this->container['annual_income_max'] = isset($data['annual_income_max']) ? $data['annual_income_max'] : null;
        $this->container['max_occupancy'] = isset($data['max_occupancy']) ? $data['max_occupancy'] : null;
        $this->container['min_occupancy'] = isset($data['min_occupancy']) ? $data['min_occupancy'] : null;
        $this->container['monthly_rent'] = isset($data['monthly_rent']) ? $data['monthly_rent'] : null;
        $this->container['num_bathrooms'] = isset($data['num_bathrooms']) ? $data['num_bathrooms'] : null;
        $this->container['num_bedrooms'] = isset($data['num_bedrooms']) ? $data['num_bedrooms'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['priority_type'] = isset($data['priority_type']) ? $data['priority_type'] : null;
        $this->container['reserved_type'] = isset($data['reserved_type']) ? $data['reserved_type'] : null;
        $this->container['sq_feet'] = isset($data['sq_feet']) ? $data['sq_feet'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['monthly_rent_as_percent_of_income'] = isset($data['monthly_rent_as_percent_of_income']) ? $data['monthly_rent_as_percent_of_income'] : null;
        $this->container['bmr_program_chart'] = isset($data['bmr_program_chart']) ? $data['bmr_program_chart'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ami_chart'] === null) {
            $invalidProperties[] = "'ami_chart' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ami_chart
     *
     * @return AllOfUnitUpdateDtoAmiChart
     */
    public function getAmiChart()
    {
        return $this->container['ami_chart'];
    }

    /**
     * Sets ami_chart
     *
     * @param AllOfUnitUpdateDtoAmiChart $ami_chart ami_chart
     *
     * @return $this
     */
    public function setAmiChart($ami_chart)
    {
        $this->container['ami_chart'] = $ami_chart;

        return $this;
    }

    /**
     * Gets ami_percentage
     *
     * @return string
     */
    public function getAmiPercentage()
    {
        return $this->container['ami_percentage'];
    }

    /**
     * Sets ami_percentage
     *
     * @param string $ami_percentage ami_percentage
     *
     * @return $this
     */
    public function setAmiPercentage($ami_percentage)
    {
        $this->container['ami_percentage'] = $ami_percentage;

        return $this;
    }

    /**
     * Gets annual_income_min
     *
     * @return string
     */
    public function getAnnualIncomeMin()
    {
        return $this->container['annual_income_min'];
    }

    /**
     * Sets annual_income_min
     *
     * @param string $annual_income_min annual_income_min
     *
     * @return $this
     */
    public function setAnnualIncomeMin($annual_income_min)
    {
        $this->container['annual_income_min'] = $annual_income_min;

        return $this;
    }

    /**
     * Gets monthly_income_min
     *
     * @return string
     */
    public function getMonthlyIncomeMin()
    {
        return $this->container['monthly_income_min'];
    }

    /**
     * Sets monthly_income_min
     *
     * @param string $monthly_income_min monthly_income_min
     *
     * @return $this
     */
    public function setMonthlyIncomeMin($monthly_income_min)
    {
        $this->container['monthly_income_min'] = $monthly_income_min;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return float
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param float $floor floor
     *
     * @return $this
     */
    public function setFloor($floor)
    {
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets annual_income_max
     *
     * @return string
     */
    public function getAnnualIncomeMax()
    {
        return $this->container['annual_income_max'];
    }

    /**
     * Sets annual_income_max
     *
     * @param string $annual_income_max annual_income_max
     *
     * @return $this
     */
    public function setAnnualIncomeMax($annual_income_max)
    {
        $this->container['annual_income_max'] = $annual_income_max;

        return $this;
    }

    /**
     * Gets max_occupancy
     *
     * @return float
     */
    public function getMaxOccupancy()
    {
        return $this->container['max_occupancy'];
    }

    /**
     * Sets max_occupancy
     *
     * @param float $max_occupancy max_occupancy
     *
     * @return $this
     */
    public function setMaxOccupancy($max_occupancy)
    {
        $this->container['max_occupancy'] = $max_occupancy;

        return $this;
    }

    /**
     * Gets min_occupancy
     *
     * @return float
     */
    public function getMinOccupancy()
    {
        return $this->container['min_occupancy'];
    }

    /**
     * Sets min_occupancy
     *
     * @param float $min_occupancy min_occupancy
     *
     * @return $this
     */
    public function setMinOccupancy($min_occupancy)
    {
        $this->container['min_occupancy'] = $min_occupancy;

        return $this;
    }

    /**
     * Gets monthly_rent
     *
     * @return string
     */
    public function getMonthlyRent()
    {
        return $this->container['monthly_rent'];
    }

    /**
     * Sets monthly_rent
     *
     * @param string $monthly_rent monthly_rent
     *
     * @return $this
     */
    public function setMonthlyRent($monthly_rent)
    {
        $this->container['monthly_rent'] = $monthly_rent;

        return $this;
    }

    /**
     * Gets num_bathrooms
     *
     * @return float
     */
    public function getNumBathrooms()
    {
        return $this->container['num_bathrooms'];
    }

    /**
     * Sets num_bathrooms
     *
     * @param float $num_bathrooms num_bathrooms
     *
     * @return $this
     */
    public function setNumBathrooms($num_bathrooms)
    {
        $this->container['num_bathrooms'] = $num_bathrooms;

        return $this;
    }

    /**
     * Gets num_bedrooms
     *
     * @return float
     */
    public function getNumBedrooms()
    {
        return $this->container['num_bedrooms'];
    }

    /**
     * Sets num_bedrooms
     *
     * @param float $num_bedrooms num_bedrooms
     *
     * @return $this
     */
    public function setNumBedrooms($num_bedrooms)
    {
        $this->container['num_bedrooms'] = $num_bedrooms;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets priority_type
     *
     * @return string
     */
    public function getPriorityType()
    {
        return $this->container['priority_type'];
    }

    /**
     * Sets priority_type
     *
     * @param string $priority_type priority_type
     *
     * @return $this
     */
    public function setPriorityType($priority_type)
    {
        $this->container['priority_type'] = $priority_type;

        return $this;
    }

    /**
     * Gets reserved_type
     *
     * @return string
     */
    public function getReservedType()
    {
        return $this->container['reserved_type'];
    }

    /**
     * Sets reserved_type
     *
     * @param string $reserved_type reserved_type
     *
     * @return $this
     */
    public function setReservedType($reserved_type)
    {
        $this->container['reserved_type'] = $reserved_type;

        return $this;
    }

    /**
     * Gets sq_feet
     *
     * @return string
     */
    public function getSqFeet()
    {
        return $this->container['sq_feet'];
    }

    /**
     * Sets sq_feet
     *
     * @param string $sq_feet sq_feet
     *
     * @return $this
     */
    public function setSqFeet($sq_feet)
    {
        $this->container['sq_feet'] = $sq_feet;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type unit_type
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets monthly_rent_as_percent_of_income
     *
     * @return string
     */
    public function getMonthlyRentAsPercentOfIncome()
    {
        return $this->container['monthly_rent_as_percent_of_income'];
    }

    /**
     * Sets monthly_rent_as_percent_of_income
     *
     * @param string $monthly_rent_as_percent_of_income monthly_rent_as_percent_of_income
     *
     * @return $this
     */
    public function setMonthlyRentAsPercentOfIncome($monthly_rent_as_percent_of_income)
    {
        $this->container['monthly_rent_as_percent_of_income'] = $monthly_rent_as_percent_of_income;

        return $this;
    }

    /**
     * Gets bmr_program_chart
     *
     * @return bool
     */
    public function getBmrProgramChart()
    {
        return $this->container['bmr_program_chart'];
    }

    /**
     * Sets bmr_program_chart
     *
     * @param bool $bmr_program_chart bmr_program_chart
     *
     * @return $this
     */
    public function setBmrProgramChart($bmr_program_chart)
    {
        $this->container['bmr_program_chart'] = $bmr_program_chart;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
