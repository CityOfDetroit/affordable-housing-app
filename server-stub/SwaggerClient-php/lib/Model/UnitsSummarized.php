<?php
/**
 * UnitsSummarized
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bloom API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UnitsSummarized Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnitsSummarized implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnitsSummarized';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_types' => 'string[]',
'reserved_types' => 'string[]',
'priority_types' => 'string[]',
'ami_percentages' => 'string[]',
'by_unit_type' => '\Swagger\Client\Model\UnitSummary[]',
'by_non_reserved_unit_type' => '\Swagger\Client\Model\UnitSummary[]',
'by_reserved_type' => '\Swagger\Client\Model\UnitSummaryByReservedType[]',
'by_ami' => '\Swagger\Client\Model\UnitSummaryByAMI[]',
'hmi' => '\Swagger\Client\Model\HMI'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_types' => null,
'reserved_types' => null,
'priority_types' => null,
'ami_percentages' => null,
'by_unit_type' => null,
'by_non_reserved_unit_type' => null,
'by_reserved_type' => null,
'by_ami' => null,
'hmi' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_types' => 'unitTypes',
'reserved_types' => 'reservedTypes',
'priority_types' => 'priorityTypes',
'ami_percentages' => 'amiPercentages',
'by_unit_type' => 'byUnitType',
'by_non_reserved_unit_type' => 'byNonReservedUnitType',
'by_reserved_type' => 'byReservedType',
'by_ami' => 'byAMI',
'hmi' => 'hmi'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_types' => 'setUnitTypes',
'reserved_types' => 'setReservedTypes',
'priority_types' => 'setPriorityTypes',
'ami_percentages' => 'setAmiPercentages',
'by_unit_type' => 'setByUnitType',
'by_non_reserved_unit_type' => 'setByNonReservedUnitType',
'by_reserved_type' => 'setByReservedType',
'by_ami' => 'setByAmi',
'hmi' => 'setHmi'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_types' => 'getUnitTypes',
'reserved_types' => 'getReservedTypes',
'priority_types' => 'getPriorityTypes',
'ami_percentages' => 'getAmiPercentages',
'by_unit_type' => 'getByUnitType',
'by_non_reserved_unit_type' => 'getByNonReservedUnitType',
'by_reserved_type' => 'getByReservedType',
'by_ami' => 'getByAmi',
'hmi' => 'getHmi'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_types'] = isset($data['unit_types']) ? $data['unit_types'] : null;
        $this->container['reserved_types'] = isset($data['reserved_types']) ? $data['reserved_types'] : null;
        $this->container['priority_types'] = isset($data['priority_types']) ? $data['priority_types'] : null;
        $this->container['ami_percentages'] = isset($data['ami_percentages']) ? $data['ami_percentages'] : null;
        $this->container['by_unit_type'] = isset($data['by_unit_type']) ? $data['by_unit_type'] : null;
        $this->container['by_non_reserved_unit_type'] = isset($data['by_non_reserved_unit_type']) ? $data['by_non_reserved_unit_type'] : null;
        $this->container['by_reserved_type'] = isset($data['by_reserved_type']) ? $data['by_reserved_type'] : null;
        $this->container['by_ami'] = isset($data['by_ami']) ? $data['by_ami'] : null;
        $this->container['hmi'] = isset($data['hmi']) ? $data['hmi'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_types'] === null) {
            $invalidProperties[] = "'unit_types' can't be null";
        }
        if ($this->container['reserved_types'] === null) {
            $invalidProperties[] = "'reserved_types' can't be null";
        }
        if ($this->container['priority_types'] === null) {
            $invalidProperties[] = "'priority_types' can't be null";
        }
        if ($this->container['ami_percentages'] === null) {
            $invalidProperties[] = "'ami_percentages' can't be null";
        }
        if ($this->container['by_unit_type'] === null) {
            $invalidProperties[] = "'by_unit_type' can't be null";
        }
        if ($this->container['by_non_reserved_unit_type'] === null) {
            $invalidProperties[] = "'by_non_reserved_unit_type' can't be null";
        }
        if ($this->container['by_reserved_type'] === null) {
            $invalidProperties[] = "'by_reserved_type' can't be null";
        }
        if ($this->container['by_ami'] === null) {
            $invalidProperties[] = "'by_ami' can't be null";
        }
        if ($this->container['hmi'] === null) {
            $invalidProperties[] = "'hmi' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_types
     *
     * @return string[]
     */
    public function getUnitTypes()
    {
        return $this->container['unit_types'];
    }

    /**
     * Sets unit_types
     *
     * @param string[] $unit_types unit_types
     *
     * @return $this
     */
    public function setUnitTypes($unit_types)
    {
        $this->container['unit_types'] = $unit_types;

        return $this;
    }

    /**
     * Gets reserved_types
     *
     * @return string[]
     */
    public function getReservedTypes()
    {
        return $this->container['reserved_types'];
    }

    /**
     * Sets reserved_types
     *
     * @param string[] $reserved_types reserved_types
     *
     * @return $this
     */
    public function setReservedTypes($reserved_types)
    {
        $this->container['reserved_types'] = $reserved_types;

        return $this;
    }

    /**
     * Gets priority_types
     *
     * @return string[]
     */
    public function getPriorityTypes()
    {
        return $this->container['priority_types'];
    }

    /**
     * Sets priority_types
     *
     * @param string[] $priority_types priority_types
     *
     * @return $this
     */
    public function setPriorityTypes($priority_types)
    {
        $this->container['priority_types'] = $priority_types;

        return $this;
    }

    /**
     * Gets ami_percentages
     *
     * @return string[]
     */
    public function getAmiPercentages()
    {
        return $this->container['ami_percentages'];
    }

    /**
     * Sets ami_percentages
     *
     * @param string[] $ami_percentages ami_percentages
     *
     * @return $this
     */
    public function setAmiPercentages($ami_percentages)
    {
        $this->container['ami_percentages'] = $ami_percentages;

        return $this;
    }

    /**
     * Gets by_unit_type
     *
     * @return \Swagger\Client\Model\UnitSummary[]
     */
    public function getByUnitType()
    {
        return $this->container['by_unit_type'];
    }

    /**
     * Sets by_unit_type
     *
     * @param \Swagger\Client\Model\UnitSummary[] $by_unit_type by_unit_type
     *
     * @return $this
     */
    public function setByUnitType($by_unit_type)
    {
        $this->container['by_unit_type'] = $by_unit_type;

        return $this;
    }

    /**
     * Gets by_non_reserved_unit_type
     *
     * @return \Swagger\Client\Model\UnitSummary[]
     */
    public function getByNonReservedUnitType()
    {
        return $this->container['by_non_reserved_unit_type'];
    }

    /**
     * Sets by_non_reserved_unit_type
     *
     * @param \Swagger\Client\Model\UnitSummary[] $by_non_reserved_unit_type by_non_reserved_unit_type
     *
     * @return $this
     */
    public function setByNonReservedUnitType($by_non_reserved_unit_type)
    {
        $this->container['by_non_reserved_unit_type'] = $by_non_reserved_unit_type;

        return $this;
    }

    /**
     * Gets by_reserved_type
     *
     * @return \Swagger\Client\Model\UnitSummaryByReservedType[]
     */
    public function getByReservedType()
    {
        return $this->container['by_reserved_type'];
    }

    /**
     * Sets by_reserved_type
     *
     * @param \Swagger\Client\Model\UnitSummaryByReservedType[] $by_reserved_type by_reserved_type
     *
     * @return $this
     */
    public function setByReservedType($by_reserved_type)
    {
        $this->container['by_reserved_type'] = $by_reserved_type;

        return $this;
    }

    /**
     * Gets by_ami
     *
     * @return \Swagger\Client\Model\UnitSummaryByAMI[]
     */
    public function getByAmi()
    {
        return $this->container['by_ami'];
    }

    /**
     * Sets by_ami
     *
     * @param \Swagger\Client\Model\UnitSummaryByAMI[] $by_ami by_ami
     *
     * @return $this
     */
    public function setByAmi($by_ami)
    {
        $this->container['by_ami'] = $by_ami;

        return $this;
    }

    /**
     * Gets hmi
     *
     * @return \Swagger\Client\Model\HMI
     */
    public function getHmi()
    {
        return $this->container['hmi'];
    }

    /**
     * Sets hmi
     *
     * @param \Swagger\Client\Model\HMI $hmi hmi
     *
     * @return $this
     */
    public function setHmi($hmi)
    {
        $this->container['hmi'] = $hmi;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
