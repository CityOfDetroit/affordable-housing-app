<?php
/**
 * DemographicsCreateDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bloom API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DemographicsCreateDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DemographicsCreateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DemographicsCreateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ethnicity' => 'string',
'gender' => 'string',
'sexual_orientation' => 'string',
'how_did_you_hear' => 'string[]',
'race' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ethnicity' => null,
'gender' => null,
'sexual_orientation' => null,
'how_did_you_hear' => null,
'race' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ethnicity' => 'ethnicity',
'gender' => 'gender',
'sexual_orientation' => 'sexualOrientation',
'how_did_you_hear' => 'howDidYouHear',
'race' => 'race'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ethnicity' => 'setEthnicity',
'gender' => 'setGender',
'sexual_orientation' => 'setSexualOrientation',
'how_did_you_hear' => 'setHowDidYouHear',
'race' => 'setRace'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ethnicity' => 'getEthnicity',
'gender' => 'getGender',
'sexual_orientation' => 'getSexualOrientation',
'how_did_you_hear' => 'getHowDidYouHear',
'race' => 'getRace'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ethnicity'] = isset($data['ethnicity']) ? $data['ethnicity'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['sexual_orientation'] = isset($data['sexual_orientation']) ? $data['sexual_orientation'] : null;
        $this->container['how_did_you_hear'] = isset($data['how_did_you_hear']) ? $data['how_did_you_hear'] : null;
        $this->container['race'] = isset($data['race']) ? $data['race'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['how_did_you_hear'] === null) {
            $invalidProperties[] = "'how_did_you_hear' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ethnicity
     *
     * @return string
     */
    public function getEthnicity()
    {
        return $this->container['ethnicity'];
    }

    /**
     * Sets ethnicity
     *
     * @param string $ethnicity ethnicity
     *
     * @return $this
     */
    public function setEthnicity($ethnicity)
    {
        $this->container['ethnicity'] = $ethnicity;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets sexual_orientation
     *
     * @return string
     */
    public function getSexualOrientation()
    {
        return $this->container['sexual_orientation'];
    }

    /**
     * Sets sexual_orientation
     *
     * @param string $sexual_orientation sexual_orientation
     *
     * @return $this
     */
    public function setSexualOrientation($sexual_orientation)
    {
        $this->container['sexual_orientation'] = $sexual_orientation;

        return $this;
    }

    /**
     * Gets how_did_you_hear
     *
     * @return string[]
     */
    public function getHowDidYouHear()
    {
        return $this->container['how_did_you_hear'];
    }

    /**
     * Sets how_did_you_hear
     *
     * @param string[] $how_did_you_hear how_did_you_hear
     *
     * @return $this
     */
    public function setHowDidYouHear($how_did_you_hear)
    {
        $this->container['how_did_you_hear'] = $how_did_you_hear;

        return $this;
    }

    /**
     * Gets race
     *
     * @return string
     */
    public function getRace()
    {
        return $this->container['race'];
    }

    /**
     * Sets race
     *
     * @param string $race race
     *
     * @return $this
     */
    public function setRace($race)
    {
        $this->container['race'] = $race;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
