<?php
/**
 * UnitSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bloom API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UnitSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnitSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UnitSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unit_type' => 'string',
'min_income_range' => '\Swagger\Client\Model\MinMaxCurrency',
'occupancy_range' => '\Swagger\Client\Model\MinMax',
'rent_as_percent_income_range' => '\Swagger\Client\Model\MinMax',
'rent_range' => '\Swagger\Client\Model\MinMaxCurrency',
'total_available' => 'float',
'area_range' => '\Swagger\Client\Model\MinMax',
'floor_range' => '\Swagger\Client\Model\MinMax'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unit_type' => null,
'min_income_range' => null,
'occupancy_range' => null,
'rent_as_percent_income_range' => null,
'rent_range' => null,
'total_available' => null,
'area_range' => null,
'floor_range' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_type' => 'unitType',
'min_income_range' => 'minIncomeRange',
'occupancy_range' => 'occupancyRange',
'rent_as_percent_income_range' => 'rentAsPercentIncomeRange',
'rent_range' => 'rentRange',
'total_available' => 'totalAvailable',
'area_range' => 'areaRange',
'floor_range' => 'floorRange'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_type' => 'setUnitType',
'min_income_range' => 'setMinIncomeRange',
'occupancy_range' => 'setOccupancyRange',
'rent_as_percent_income_range' => 'setRentAsPercentIncomeRange',
'rent_range' => 'setRentRange',
'total_available' => 'setTotalAvailable',
'area_range' => 'setAreaRange',
'floor_range' => 'setFloorRange'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_type' => 'getUnitType',
'min_income_range' => 'getMinIncomeRange',
'occupancy_range' => 'getOccupancyRange',
'rent_as_percent_income_range' => 'getRentAsPercentIncomeRange',
'rent_range' => 'getRentRange',
'total_available' => 'getTotalAvailable',
'area_range' => 'getAreaRange',
'floor_range' => 'getFloorRange'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['min_income_range'] = isset($data['min_income_range']) ? $data['min_income_range'] : null;
        $this->container['occupancy_range'] = isset($data['occupancy_range']) ? $data['occupancy_range'] : null;
        $this->container['rent_as_percent_income_range'] = isset($data['rent_as_percent_income_range']) ? $data['rent_as_percent_income_range'] : null;
        $this->container['rent_range'] = isset($data['rent_range']) ? $data['rent_range'] : null;
        $this->container['total_available'] = isset($data['total_available']) ? $data['total_available'] : null;
        $this->container['area_range'] = isset($data['area_range']) ? $data['area_range'] : null;
        $this->container['floor_range'] = isset($data['floor_range']) ? $data['floor_range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['unit_type'] === null) {
            $invalidProperties[] = "'unit_type' can't be null";
        }
        if ($this->container['min_income_range'] === null) {
            $invalidProperties[] = "'min_income_range' can't be null";
        }
        if ($this->container['occupancy_range'] === null) {
            $invalidProperties[] = "'occupancy_range' can't be null";
        }
        if ($this->container['rent_as_percent_income_range'] === null) {
            $invalidProperties[] = "'rent_as_percent_income_range' can't be null";
        }
        if ($this->container['rent_range'] === null) {
            $invalidProperties[] = "'rent_range' can't be null";
        }
        if ($this->container['total_available'] === null) {
            $invalidProperties[] = "'total_available' can't be null";
        }
        if ($this->container['area_range'] === null) {
            $invalidProperties[] = "'area_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type unit_type
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets min_income_range
     *
     * @return \Swagger\Client\Model\MinMaxCurrency
     */
    public function getMinIncomeRange()
    {
        return $this->container['min_income_range'];
    }

    /**
     * Sets min_income_range
     *
     * @param \Swagger\Client\Model\MinMaxCurrency $min_income_range min_income_range
     *
     * @return $this
     */
    public function setMinIncomeRange($min_income_range)
    {
        $this->container['min_income_range'] = $min_income_range;

        return $this;
    }

    /**
     * Gets occupancy_range
     *
     * @return \Swagger\Client\Model\MinMax
     */
    public function getOccupancyRange()
    {
        return $this->container['occupancy_range'];
    }

    /**
     * Sets occupancy_range
     *
     * @param \Swagger\Client\Model\MinMax $occupancy_range occupancy_range
     *
     * @return $this
     */
    public function setOccupancyRange($occupancy_range)
    {
        $this->container['occupancy_range'] = $occupancy_range;

        return $this;
    }

    /**
     * Gets rent_as_percent_income_range
     *
     * @return \Swagger\Client\Model\MinMax
     */
    public function getRentAsPercentIncomeRange()
    {
        return $this->container['rent_as_percent_income_range'];
    }

    /**
     * Sets rent_as_percent_income_range
     *
     * @param \Swagger\Client\Model\MinMax $rent_as_percent_income_range rent_as_percent_income_range
     *
     * @return $this
     */
    public function setRentAsPercentIncomeRange($rent_as_percent_income_range)
    {
        $this->container['rent_as_percent_income_range'] = $rent_as_percent_income_range;

        return $this;
    }

    /**
     * Gets rent_range
     *
     * @return \Swagger\Client\Model\MinMaxCurrency
     */
    public function getRentRange()
    {
        return $this->container['rent_range'];
    }

    /**
     * Sets rent_range
     *
     * @param \Swagger\Client\Model\MinMaxCurrency $rent_range rent_range
     *
     * @return $this
     */
    public function setRentRange($rent_range)
    {
        $this->container['rent_range'] = $rent_range;

        return $this;
    }

    /**
     * Gets total_available
     *
     * @return float
     */
    public function getTotalAvailable()
    {
        return $this->container['total_available'];
    }

    /**
     * Sets total_available
     *
     * @param float $total_available total_available
     *
     * @return $this
     */
    public function setTotalAvailable($total_available)
    {
        $this->container['total_available'] = $total_available;

        return $this;
    }

    /**
     * Gets area_range
     *
     * @return \Swagger\Client\Model\MinMax
     */
    public function getAreaRange()
    {
        return $this->container['area_range'];
    }

    /**
     * Sets area_range
     *
     * @param \Swagger\Client\Model\MinMax $area_range area_range
     *
     * @return $this
     */
    public function setAreaRange($area_range)
    {
        $this->container['area_range'] = $area_range;

        return $this;
    }

    /**
     * Gets floor_range
     *
     * @return \Swagger\Client\Model\MinMax
     */
    public function getFloorRange()
    {
        return $this->container['floor_range'];
    }

    /**
     * Sets floor_range
     *
     * @param \Swagger\Client\Model\MinMax $floor_range floor_range
     *
     * @return $this
     */
    public function setFloorRange($floor_range)
    {
        $this->container['floor_range'] = $floor_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
